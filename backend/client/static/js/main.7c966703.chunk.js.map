{"version":3,"sources":["pages/Mapping/MapControl.js","pages/Mapping/OrderInformation.js","pages/Mapping/index.js","App.js","serviceWorker.js","index.js"],"names":["MapControl","props","map","position","children","controlDiv","useMemo","document","createElement","useEffect","controls","push","createPortal","OrderInformation","order","Card","List","ListItem","ListItemAvatar","Avatar","src","ListItemText","primary","driver_name","secondary","status","labelStatus","location_id","loader","Loader","process","socket","io","Mapping","id","useParams","useState","setOrder","setMap","startMarker","setStartMarker","endMarker","setEndMarker","setPosition","snackbar","useSnackbar","a","axios","get","data","location_geo","lat","lng","parseFloat","load","window","google","maps","Map","getElementById","center","zoom","start","Marker","title","icon","end","on","payload","console","log","bounds","LatLngBounds","extend","getPosition","fitBounds","enqueueSnackbar","variant","anchorOrigin","horizontal","vertical","style","width","height","ControlPosition","TOP_RIGHT","Box","m","App","basename","path","component","exact","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7c966703.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport {useMemo} from \"react\";\r\nimport {createPortal} from \"react-dom\";\r\nimport {useEffect} from \"react\";\r\n\r\nconst MapControl = (props) => {\r\n    const {map, position, children} = props;\r\n    const controlDiv = useMemo(() => document.createElement('div'), []);\r\n\r\n    useEffect(() => {\r\n        if (map && position) {\r\n            map.controls[position].push(controlDiv);\r\n        }\r\n    }, [map, position]);\r\n\r\n    return createPortal(children, controlDiv);\r\n};\r\n\r\n\r\nexport default MapControl;\r\n","import * as React from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport {Card, ListItemAvatar, ListItemText} from \"@material-ui/core\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nconst OrderInformation = (props) => {\r\n    const {order} = props;\r\n\r\n    function labelStatus(status) {\r\n        switch (status) {\r\n            case 1:\r\n                return 'Pedido Pendente';\r\n            case 2:\r\n                return 'Pedido Entregue';\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card>\r\n            <List>\r\n                <ListItem>\r\n                    <ListItemAvatar>\r\n                        <Avatar src={'https://avatars2.githubusercontent.com/u/4926329?s=460&v=4'}/>\r\n                    </ListItemAvatar>\r\n                    <ListItemText primary={order.driver_name} secondary={labelStatus(order.status)} />\r\n                </ListItem>\r\n                <ListItem>\r\n                    <ListItemText secondary={`Local de entrega: Destino ${order.location_id}`} />\r\n                </ListItem>\r\n            </List>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default OrderInformation\r\n","import * as React from 'react';\r\nimport {useState} from \"react\";\r\nimport {useEffect} from \"react\";\r\nimport {Loader} from 'google-maps';\r\nimport {useParams} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport io from 'socket.io-client';\r\nimport {Box} from \"@material-ui/core\";\r\nimport MapControl from \"./MapControl\";\r\nimport OrderInformation from \"./OrderInformation\";\r\nimport {useSnackbar} from \"notistack\";\r\n\r\nconst loader = new Loader(process.env.REACT_APP_GOOGLE_API_KEY);\r\nconst socket = io(process.env.REACT_APP_MICRO_MAPPING_URL);\r\n\r\nconst Mapping = () => {\r\n    const {id} = useParams();\r\n\r\n    const [order, setOrder] = useState();\r\n    const [map, setMap] = useState();\r\n    const [startMarker, setStartMarker] = useState();\r\n    const [endMarker, setEndMarker] = useState();\r\n    const [position, setPosition] = useState();\r\n\r\n    const snackbar = useSnackbar();\r\n\r\n    useEffect(() => {\r\n        async function load() {\r\n            const {data} = await axios\r\n                .get(`${process.env.REACT_APP_MICRO_MAPPING_URL}/orders/${id}`);\r\n\r\n            setOrder(data);\r\n\r\n            const [lat, lng] = data.location_geo;\r\n            const position = {lat: parseFloat(lat), lng: parseFloat(lng)};\r\n            window.google = await loader.load();\r\n            const map = new window.google.maps.Map(document.getElementById('map'), {\r\n                center: position,\r\n                zoom: 15,\r\n            });\r\n\r\n            const start = new window.google.maps.Marker({\r\n                title: 'InÃ­cio',\r\n                icon: 'http://maps.google.com/mapfiles/kml/pal4/icon7.png'\r\n            });\r\n\r\n            const end = new window.google.maps.Marker({\r\n                position: position,\r\n                map: map,\r\n                title: 'Destino'\r\n            });\r\n\r\n            setMap(map);\r\n            setStartMarker(start);\r\n            setEndMarker(end);\r\n        }\r\n\r\n        load();\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        socket.on(`order.${id}.new-position`, (payload) => {\r\n            console.log(payload);\r\n            setPosition(payload)\r\n        });\r\n    }, [id]);\r\n\r\n    useEffect(() => {\r\n        if (!map || !position) {\r\n            return;\r\n        }\r\n\r\n        if(position.lat === 0 && position.lng === 0){\r\n            snackbar.enqueueSnackbar('Motorista chegou no destino', {\r\n                variant: 'success',\r\n                anchorOrigin: {\r\n                    horizontal: 'right',\r\n                    vertical: 'bottom'\r\n                },\r\n            });\r\n            return;\r\n        }\r\n\r\n        startMarker.setPosition({lat: position.lat, lng: position.lng});\r\n        startMarker.setMap(map);\r\n        const bounds = new window.google.maps.LatLngBounds();\r\n\r\n        bounds.extend(startMarker.getPosition());\r\n        bounds.extend(endMarker.getPosition());\r\n\r\n        map.fitBounds(bounds);\r\n    }, [map, position]);\r\n\r\n    return (\r\n        <div id={'map'} style={{width: '100%', height: '100%'}}>\r\n            {\r\n                map &&\r\n                <MapControl map={map} position={window.google.maps.ControlPosition.TOP_RIGHT}>\r\n                    <Box m={'10px'}>\r\n                        <OrderInformation order={order}/>\r\n                    </Box>\r\n                </MapControl>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Mapping;\r\n","import React from 'react';\nimport './App.css';\nimport {BrowserRouter, Switch, Route} from \"react-router-dom\";\nimport Mapping from \"./pages/Mapping\";\nimport {SnackbarProvider} from \"notistack\";\n\nfunction App() {\n    return (\n        <SnackbarProvider>\n            <BrowserRouter basename={process.env.NODE_ENV === 'development'? '/': '/client'}>\n                <Switch>\n                    <Route path={'/orders/:id/mapping'} component={Mapping} exact={true}/>\n                </Switch>\n            </BrowserRouter>\n        </SnackbarProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}